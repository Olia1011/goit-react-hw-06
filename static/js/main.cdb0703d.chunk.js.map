{"version":3,"sources":["components/Notification/Notification.module.css","components/Section/Section.js","components/Notification/Notification.js","components/Notification/Error.js","redux/actions.js","components/contactForm/ContactForm.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","components/filter/Filter.js","components/logo/Bounce.js","components/App.js","redux/reducer.js","redux/store.js","index.js","transition/slide.module.css","components/contactListItem/ContactListItem.module.css","components/contactForm/contactForm.module.css","components/filter/filter.module.css","components/Section/Section.module.css","components/contactList/contactlist.module.css"],"names":["module","exports","Section","title","children","className","styles","section","Notification","name","error","message","Error","addContact","createAction","value","payload","id","uuid","number","deleteContact","filterContact","ContactForm","state","isShow","changeHandler","e","setState","target","submitHandler","preventDefault","props","contacts","filter","contact","length","NotificationMessage","onAddContact","errorMessage","reset","prevState","isOpen","this","CSSTransition","in","timeout","unmountOnExit","classNames","slideTransition","contactForm","onSubmit","type","onChange","placeholder","btn","onClick","onToggleFilter","Component","mapDispatchToProps","actions","connect","ContactListItem","onDelete","contactLi","contactLiP","items","toLowerCase","includes","TransitionGroup","ul","map","item","key","onFilter","searchInput","inputName","Bounce","styled","div","keyframes","bounce","App","createReducer","action","combineReducers","persistConfig","storage","persistedReducer","persistReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","persistore","persistStore","ReactDOM","render","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.cdb0703d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Notification_error__vl814\",\"message\":\"Notification_message__2uLPr\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n  <section className={styles.section}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\nimport error from './Notification.module.css';\n\nconst Notification = ({name}) => ( \n<div className={error.error}>\n\t<h3 className={error.message}>{`${name} Contact already exist!`}\n</h3>\n</div>\n)\n\nexport default Notification;","import React from 'react';\r\nimport error from './Notification.module.css';\r\n\r\nconst Error = ({name}) => ( \r\n<div className={error.error}>\r\n\t<h3 className={error.message}>{`${name} Add all information!`}\r\n</h3>\r\n</div>\r\n)\r\n\r\nexport default Error;","import { uuid } from 'uuidv4';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add',value => ({\n    payload:{\n            id: uuid(),\n            name:value.name,\n            number:value.number\n    }\n}))\n\nconst deleteContact = createAction('contacts/delete')\nexport const filterContact = createAction('contacts/filterContact')\n\nexport default { addContact, deleteContact, filterContact }","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport styles from './contactForm.module.css';\nimport slideTransition from '../../transition/slide.module.css';\nimport Notification from '../Notification/Notification';\nimport Error from '../Notification/Error';\nimport actions from '../../redux/actions';\n// import { v4 as uuidv4 } from \"uuid\";\n\nclass ContactForm extends Component {\n  state = {\n    // contacts: [],\n    name: '',\n    number: '',\n    isShow: false,\n  };\n\n  changeHandler = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    const result = this.props.contacts.filter((contact)=>contact.name === this.state.name)\n    if(result.length > 0){\n        this.NotificationMessage(); \n        return\n    }  \n    (this.state.name !== '' && this.state.number !== '' )?(       \n    this.props.onAddContact({...this.state})\n    ): this.errorMessage();\n    this.reset()\n};\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  NotificationMessage = () => {\n    this.setState(prevState => ({ isShow: !prevState.isShow }));\n  };\n\n  errorMessage = ()=> {\n    this.setState (prevState=>({isShow:!prevState.isOpen}))\n}\n\n  render() {\n    const { name, number, isShow, isOpen } = this.state;\n\n    return (\n      <>\n        <CSSTransition\n          in={isShow}\n          timeout={500}\n          unmountOnExit\n          classNames={slideTransition}>\n          <Notification name={name} />\n        </CSSTransition>\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          unmountOnExit\n          classNames={slideTransition}>\n          <Error name={name} />\n        </CSSTransition>\n        <form className={styles.contactForm} onSubmit={this.submitHandler}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              value={name}\n              name=\"name\"\n              onChange={this.changeHandler}\n              placeholder=\"Enter your name \"\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              onChange={this.changeHandler}\n              placeholder=\"Enter your phone\"\n            />\n          </label>\n          <button className={styles.btn} type=\"submit\" onClick={this.props.onToggleFilter}>\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state)=> ({\n  contacts:state.contacts\n})\n\nconst mapDispatchToProps = {\n  onAddContact: actions.addContact,\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from './ContactListItem.module.css';\n\n\nconst ContactListItem = ({ name, number, onDelete }) => {\n    return (\n      <li className={styles.contactLi}>\n        <p className={styles.contactLiP}>\n          {name}: {number}\n        </p>\n        <button type=\"button\" onClick={onDelete} className={styles.btn}>\n          Delete\n        </button>\n      </li>\n    );\n  };\n\n  \nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\n  export default ContactListItem;\n","import React from 'react'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\nimport {connect} from 'react-redux';\nimport actions from '../../redux/actions';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../contactListItem/ContactListItem';\nimport slideTransition from '../../transition/slide.module.css';\nimport styles from './contactlist.module.css';\n\n\n\nconst ContactList = ({items, onDelete}) => (\n    <TransitionGroup  className={styles.ul}>\n        {items.map(item =>(\n            <CSSTransition key={item.id} timeout={250} classNames={slideTransition}>\n                    <ContactListItem {...item}\n                    onDelete= {()=>onDelete(item.id)}\n                    />\n            </CSSTransition>\n        ))}\n        \n    </TransitionGroup>\n);\n\n\n\n\nconst mapStateToProps = (state) => ({\n     items:state.contacts.filter(contact=>contact.name.toLowerCase().includes(state.filter.toLowerCase()))\n})\n\nconst mapDispatchToProps = {\n    onDelete: actions.deleteContact\n}\n\nContactList.propTypes = {\n    items:PropTypes.arrayOf(PropTypes.shape({id:PropTypes.string.isRequired}).isRequired),\n    onDelete:PropTypes.func.isRequired\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react'\nimport {connect} from 'react-redux'\nimport actions from '../../redux/actions';\nimport PropTypes from 'prop-types';\nimport styles from './filter.module.css';\n// import { CSSTransition } from 'react-transition-group';\n// import fadeTransition from '../../transition/fade.module.css';\n\nconst Filter = ({ value, onFilter}) => (\n  // <CSSTransition\n  //          in={contacts.length > 2}\n  //           timeout={250}\n  //           unmountOnExit\n  //           classNames={fadeTransition}>\n  <>\n    <label className={styles.searchInput}> Find contacts by name </label>\n    <input\n      className={styles.inputName}\n      type=\"text\"\n      value={value}\n      onChange={e=>onFilter(e.target.value)}></input>\n  </>\n  // </CSSTransition> \n);\n\nconst mapStateToProps = state =>({\n    value:state.filter\n})\n\n const mapDispatchToProps = {\n   onFilter:actions.filterContact\n }\n\n Filter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n\n\n","import styled, { keyframes } from 'styled-components';\nimport { bounce } from 'react-animations';\n\nexport const Bounce = styled.div`animation: 3s ${keyframes`${bounce}`}`;","import React, { Component } from 'react';\nimport Section from './Section/Section';\nimport ContactForm from './contactForm/ContactForm';\nimport ContactList from './contactList/ContactList';\nimport Filter from './filter/Filter';\nimport { Bounce } from './logo/Bounce';\nimport styles from './App.css';\n// import { CSSTransition } from 'react-transition-group'\n// import Notification from './Notification/Notification';\n// import fadeTransition from '../transition/fade.module.css';\n\nclass App extends Component {\n    // state = {\n    //     contacts: [],\n    //     isShow: false,\n    //     name: '',\n    //     filter: '',\n    // }\n\n    render(){\n    \n        // const { contacts, isShow, name } = this.state;\n        return (\n            <>\n            <Section>\n                <Bounce> <h2 className={styles.title}>Phonebook</h2> </Bounce>\n                <ContactForm />\n                </Section>\n                <Section>\n                <h2 className={styles.title}>Contacts</h2>\n                {/* <CSSTransition\n            in={this.state.contacts.length > 2}\n            timeout={250}\n            unmountOnExit\n            classNames={fadeTransition}> */}\n                <Filter/>\n                {/* </CSSTransition>  */}\n                <ContactList />\n                 </Section> \n            </>\n        )\n   }   \n}\n\n// const mapStateToProps = ({ contacts }) => {\n//     return {\n//       contacts: contacts.items,\n//     };\n//   };\n\n\n\nexport default App","import { combineReducers } from \"redux\";\nimport {createReducer} from '@reduxjs/toolkit'\nimport actions from './actions'\n\nconst contacts = createReducer ([], {\n    [actions.addContact]: (state, action) =>[...state, action.payload],\n    [actions.deleteContact]: (state, action) =>state.filter(contact => contact.id !== action.payload)\n})\n\nconst filter = createReducer ('', {\n    [actions.filterContact]:(state, action)=>action.payload\n})\n\nexport default combineReducers ({\n    contacts,\n    filter,\n})","import reducer from './reducer';\nimport {configureStore, getDefaultMiddleware,} from '@reduxjs/toolkit'\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n  };\n\n  const persistedReducer = persistReducer(persistConfig, reducer)\n\n  export const store = configureStore({\n    reducer:persistedReducer,\n    middleware: getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n  })\n  export const persistore = persistStore(store);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from './components/App';\nimport store, {persistore} from './redux/store'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistore}>\n            <App/>\n        </PersistGate>\n    </Provider>,document.getElementById('root'))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1Xjpz\",\"enterActive\":\"slide_enterActive__1raoE\",\"exit\":\"slide_exit__16ilT\",\"exitActive\":\"slide_exitActive__1ZAb7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactLi\":\"ContactListItem_contactLi__16hrs\",\"contactLiP\":\"ContactListItem_contactLiP__2P2a8\",\"btn\":\"ContactListItem_btn__3xk0a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"contactForm_contactForm__2oZ8G\",\"btn\":\"contactForm_btn__3CZ9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputName\":\"filter_inputName__2Tg8v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__7Gruv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"contactlist_ul__2p2fU\"};"],"sourceRoot":""}